package uk.ac.cam.cl.echo.extrusionfinder.server.zernike;

import org.apache.commons.io.FilenameUtils;
import org.junit.Test;

import javax.imageio.ImageIO;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Modifier;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class ZernikeTester {

    //Zernike moments of the images in the folder testimages1
    double[][] zernikeMoments = {
            {0.31830988618380207, 0.025136023494833914, 0.10399598432623215, 0.011640906481696855, 0.028990796833629928, 0.012420632171754275, 0.13585973556510914, 0.011655537165141991, 0.0029574333037594015, 0.05046997461439584, 0.015572086486867986, 0.00387274553148997, 0.0904082790454448, 0.01221858394835789, 0.04940940037230223, 0.0011966887250222911, 0.11312571710822837, 0.013311239761628674, 0.018981370990821325, 0.0019480081641745461, 0.24629351499519084, 0.05935061043675348, 0.07730305311767184, 0.006849041838110381, 0.01005470916452676, 0.07437113986289658, 0.058818930724023145, 0.03438207574601993, 0.00631442030815851, 0.0010110303340493578},
            {0.3183098861837668, 0.01814306885661754, 0.12309197245279199, 0.016933585300113577, 0.020469416136646938, 0.008374090976621888, 0.1192071885285531, 0.001541018808913939, 0.003390250852344901, 0.05311796612897057, 0.007452775599615949, 0.0018331913251173177, 1.8624032071198104E-5, 0.046966515568117886, 0.034208438005879416, 0.0021385871839129495, 0.056422296421245875, 0.02280595231484466, 0.008627518749033227, 0.0014427227413520921, 0.23806860638968547, 0.011005044762478397, 0.05429455969748347, 0.007922371978745806, 0.010437650972085152, 0.0972275445317399, 0.026141701228988276, 0.0298620313364633, 0.007726009621429929, 0.0015929869314674878},
            {0.3183098861837811, 0.021664313072097145, 0.12590238643330848, 0.01359831585462681, 0.0040644209688282295, 0.005944179347822391, 0.12570635317473944, 0.006948517541137186, 0.007069438597673781, 0.04282570823286633, 0.0044022137567675855, 0.0025345191079174404, 0.06347889169247488, 0.040623800318077954, 0.002899465111541575, 8.296294975100173E-4, 0.03725499792223153, 0.01877694853782214, 0.002774306811049048, 0.001681778603776349, 0.09425911245156358, 0.009437390882970147, 0.019567056619156045, 0.0024168812966319374, 0.00779454897821411, 0.04237856419135216, 0.010487811932005217, 0.009511636111599192, 0.0021977583629929466, 0.001399259906212324},
            {0.3183098861838098, 0.015160292576443846, 0.10901347597890512, 0.010417305759562514, 0.004475351828034255, 0.0027215942926188865, 0.15710798418598249, 0.006771967904418776, 0.09188705194741047, 0.008535605060491192, 0.016599414282364104, 0.02541953772249273, 0.03417848703548673, 0.015228284149897265, 0.11745227250945561, 0.015119627129660088, 0.031725242988566375, 0.00912253772368761, 0.013513061148953662, 0.005296165884027309, 0.24555116402875807, 0.008772654385243552, 0.04727880796133445, 0.012107039102398106, 0.05945818104536522, 0.03622885081918509, 0.011188662156728852, 0.011263736985525803, 0.01144793617798503, 0.020732680093513804},
            {0.3183098861838057, 0.012637809802576302, 0.14601006826335805, 0.028130922435716823, 0.007794018416980431, 0.006078832490310346, 0.07442122941438571, 0.04544213400547825, 0.022627453019772384, 0.02426204290332658, 0.003344008102742269, 0.010394768395227367, 0.12570195189409944, 0.015760812391302496, 0.05987369504663918, 0.014524142850739094, 0.020524989260587063, 0.01587533355855512, 0.020253190824520713, 0.007357067304060843, 0.02486116830451458, 0.061469329600318486, 0.010766280087688549, 0.03715371125818449, 0.014755121156901196, 0.008557580083931883, 0.009617496857491397, 0.0042352590306665, 0.016512714186457007, 0.0027066977637809444},
    };

    @Test
    public void testConstructor() throws Exception {
        Constructor constructor = Zernike.class.getDeclaredConstructor();
        assertTrue("Constructor is not private", Modifier.isPrivate(constructor.getModifiers()));

        constructor.setAccessible(true);
        constructor.newInstance();
    }

    @Test
    public void testFactorial() {
        double a = Zernike.factorial(0);
        double b = Zernike.factorial(1);
        double c = Zernike.factorial(2);
        double d = Zernike.factorial(3);
        double e = Zernike.factorial(5);
        double f = Zernike.factorial(12);

        assertTrue(a == 1);
        assertTrue(b == 1);
        assertTrue(c == 2);
        assertTrue(d == 6);
        assertTrue(e == 120);
        assertTrue(f == 479001600);

        try {
            Zernike.factorial(-1);
            fail("IllegalArgumentException not thrown");
        } catch (IllegalArgumentException ex) {
        }
    }

    private Boolean equal(double[] a, double[] b) {
        if (a.length != b.length) return false;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;
    }

    @Test
    public void testZernikeMoments() throws IOException {
        final File directory = new File("src/test/java/uk/ac/cam/cl/echo/extrusionfinder/server/imagematching/testimages1");
        for (final File fileEntry : directory.listFiles()) {
            String fileName = fileEntry.getName();
            BufferedImage image = null;
            image = ImageIO.read(fileEntry);
            double[] zm = Zernike.zernikeMoments(image, 10, new Point2D.Double(50.0, 50.0), 50.0);
            int index = Integer.parseInt(FilenameUtils.removeExtension(fileName));
            assertTrue(equal(zm, zernikeMoments[index]));
        }
    }
}
